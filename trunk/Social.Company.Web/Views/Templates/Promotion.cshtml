@{ Layout = "~/Areas/bcms-Root/Views/Shared/BaseLayout.cshtml"; }


<h1>This is the promotion templateddd</h1>
@RenderBody()

@RenderSection("CmsContent", false)




@*@RenderSection("YourCustomRegionName", false)

<!-- ovverride predifined base regions in the layout -->
@section DoctypeTag
{
    <!DOCTYPE html>
}

@section HtmlTag
{
    <!--[if lte IE 7]><html class="ie7"><![endif]-->
    <!--[if IE 8]><html class="ie8"><![endif]-->
    <!--[if IE 9]><html class="ie9"><![endif]-->
    <!--[if !IE]><!-->
    <html>
    <!--<![endif]-->
}

@section Styles {
    @RenderSection("Styles", false)
}


@section HeadScripts {
    @RenderSection("HeadScripts", false)
}

@section Scripts {
    @RenderSection("Scripts", false)
}

<!-- add attributes to the body tag -->
@section BodyAttributes
{
    class="custom-body"
}

<!-- If you want to override the whole body tag (as in the example above), do not forget to call Html.RenderBodyAttributes() helper method for adding CMS mandatory body attributes: -->
@using BetterCms.Module.Root.Mvc.Helpers

@section BodyTag {
    <!--[if lte IE 8]>
    <body class="ie8 fixed-nav faded"@Html.RenderBodyAttributes()><![endif]-->
    <!--[if IE 9]>
    <body class="ie9 fixed-nav faded"@Html.RenderBodyAttributes()><![endif]-->
    <!--[if !IE]><!-->
    <body class="fixed-nav faded" @Html.RenderBodyAttributes()>
        <!--<![endif]-->
}

<!-- Access page data -->

<h1>@ViewBag.Title</h1>
<p>Current page ID is @ViewBag.pageId</p>

<!-- Can user manage this content -->
@model BetterCms.Module.Root.ViewModels.Cms.RenderPageViewModel

<h1>@Model.Title</h1>
<p>Current page Id is @Model.Id</p>
<p>@Model.CanManageContent ? "User can manage content" : "User can't manage content"</p>

<!-- Get more info from the page -->
@using BetterCms.Module.Blog.Helpers.Extensions
@using BetterCms.Module.Pages.Helpers.Extensions

        PageViewModel: @Model.GetPageModel()<br />
        MainImageViewModel: @Model.GetPageMainImageModel()<br />
        SecondaryImageViewModel: @Model.GetPageSecondaryImageModel()<br />
        FeaturedImageViewModel: @Model.GetPageFeaturedImageModel()<br />
        CategoryViewModel: @Model.GetPageCategoryModel()<br />
        Tags: @Model.GetPageTagsList()<br />

        IsBlogPost: @Model.IsBlogPost()<br />
        IsBlogPostActive: @Model.IsBlogPostActive()<br />
        BlogPostViewModel: @Model.GetBlogPostModel()<br />
        BlogPostAuthorViewModel: @Model.GetBlogPostAuthorModel()<br />

        <!-- Options -->
        @model BetterCms.Module.Root.ViewModels.Cms.RenderPageViewModel

        @foreach (var option in Model.Options)
        {
            <text>
                @option.Key: @option.Value
            </text>
        }

        <!--
            
            Options can be managed for:

Templates. This can be done in template edit form, in Site Settings -> Templates.
Server control widgets. This can be done in the server control edit form, in Site Settings -> Widgets, when editing server control widget.
HTML widgets. This can be done in the widget edit form, in Site Settings -> Widgets, when editing HTML widget.
Options edit form looks like that:

Image properties

Each option contains fields: Option name (required, unique), Type (required, Text by default) and Default value (optional, format depends on Type).

Available types: Text, Integer, Boolean, Float, Date, JS Include URL, CSS Include URL. Depending on type, different controls are shown (6), and different validations are executed.

JS Include URL and CSS Include URL are used for adding JavaScript / CSS ULRs. When page is rendered, CSS scripts are included in the head of HTML page and JavaScript includes are rendered at the bottom of the body.

To add new option, press add new button (1).

To enter edit mode, press edit icon (2). To save or cancel edit mode, choose one of buttons (3).

To delete and option, press delete button (4). Systematic options cannot be deleted (there is no delete button) (5).


        -->


<!--
    Additional Options

    When designing the layout (writing CSS) for CMS pages, please keep in mind that:

when content editor is not logged in, after each content in a region there is an element generated by the CMS:
<div class="clearfix"></div>
when user is logged in with editor rights (CMS control panel is visible) all regions will look like following example:
<div class="bcms-region-start"></div>
<div class="bcms-content-start"></div>
<p>SOME CONTENT!</p>
<div class="bcms-content-end clearfix"></div>
<div class="bcms-content-start"></div>
<p>SOME CONTENT!</p>
<div class="bcms-content-end clearfix"></div>
<div class="bcms-region-end"></div>


-->*@









